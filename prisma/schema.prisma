// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","debian-openssl-1.1.x","debian-openssl-3.0.x","linux-musl","linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Survey {
  id             Int            @id @default(autoincrement())
  targetAudience String         // Público-alvo
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  questions      Question[]     // Relacionamento com perguntas
  responses      SurveyResponse[] // Relacionamento com respostas

  @@map("surveys")
}

model Question {
  id        Int      @id @default(autoincrement())
  content   String   // Pergunta (Ex.: Público-alvo, Quantidade de estrelas, E-mail para contato)
  surveyId  Int
  survey    Survey   @relation(fields: [surveyId], references: [id])
  answers   SurveyAnswer[]  // Relacionamento com respostas

  @@map("questions")
}

model SurveyResponse {
  id             Int      @id @default(autoincrement())
  surveyId       Int
  ratingStars    Int      // Quantidade de estrelas obrigatória
  createdAt      DateTime @default(now())
  survey         Survey   @relation(fields: [surveyId], references: [id])
  answers        SurveyAnswer[]  // Relacionamento com respostas

  @@map("survey_responses")
}

model SurveyAnswer {
  id             Int      @id @default(autoincrement())
  responseId     Int
  questionId     Int
  answer         String   // Resposta à pergunta específica
  response       SurveyResponse @relation(fields: [responseId], references: [id])
  question       Question   @relation(fields: [questionId], references: [id])

  @@map("survey_answers")
}